let fs = require('fs');

let roles = ['pawn', 'knight', 'bishop', 'rook', 'queen', 'king'];
let colors = ['white', 'black'];

function readFiles(indir, cb) {

  let classes = [];

  colors.forEach(color => {
    roles.forEach(role => {
      let piece = color[0] + (role === 'knight' ? 'N' : role[0].toUpperCase());

      let file = `${indir}/${piece}.svg`;


      fs.readFile(file, function (err, data) {
        if (err) {
          console.warn(`Couldn't read ${file} skipping.`);
        }

        let base64 = data.toString('base64');

        classes.push(`.${role}.${color} {background-image:url('data:image/svg+xml;base64,${base64}')}`);

        if (classes.length === colors.length * roles.length) {
          cb(null, classes.join('\n'));
        }

      });

    });
  });
}

function app(indir, outfile) {
  readFiles(indir, (err, klasses) => {
    if (err) {
      console.error(`${err.code}`);
      return;
    }

    let content = `/* Generated by pieces.js */\n ${klasses}`;

    fs.writeFile(outfile, content, err => {
      if (err) {
        console.error(`Couldn't write ${outfile}`);
      } else {
        console.log('âœ“ ' + outfile);
      }
    });
  });
}

let indir = process.argv[2];
let outfile = process.argv[3];

if (!indir || !outfile) {
  console.log('Usage: pieces in-dir outfile');
} else {
  fs.access(indir, err => {
    if (err) {
      console.log(err.message);
      return;
    }

    app(indir, outfile);
  });
}
